set nocompatible
filetype off

syntax on

set history=500
set ruler
set showcmd
set encoding=utf-8
set nowrap

" Backspace behaviour
set backspace=eol,start,indent

" Whitespace
set tabstop=2 shiftwidth=2
set expandtab
set autoindent

" Search
set incsearch
set ignorecase
set smartcase

" Line numbers
set number relativenumber

" Where am I?
set cursorline
set scrolloff=15

" 80 columns
set colorcolumn=80

" See http://flaviusim.com/blog/resizing-vim-window-splits-like-a-boss/ for
" more information about the next 2 sections
" Windows with at least 5 lines, active Window with 30 lines
set winheight=30
set winminheight=5

" Resize windows by more useful amounts
nnoremap <silent> + :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> - :exe "resize " . (winheight(0) * 2/3)<CR>

" copy to/from system clipboard
set clipboard+=unnamed

" Vundle stuff
set rtp+=~/.vim/bundle/vundle
call vundle#begin()

" Vundle
Plugin 'gmarik/vundle'

" Fuzzy search
Plugin 'ctrlpvim/ctrlp.vim'

" Theme
Plugin 'chriskempson/vim-tomorrow-theme'

" git changes
Plugin 'airblade/vim-gitgutter'

" Paste with indentation
Plugin 'sickill/vim-pasta'

" syntastic
Plugin 'scrooloose/syntastic'

call vundle#end()
filetype plugin indent on

" Powerline
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup
set laststatus=2
set noshowmode

" Theme
colorscheme Tomorrow-Night

" CtrlP
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_custom_ignore = {
  \ 'dir': '\.git$\|\.hg$\|\.svn$',
  \ 'file': '\.git$',
  \ }

" syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_tex_checkers = ['chktex']

" Set 78 char width for textfiles
autocmd FileType text setlocal textwidth=78
autocmd FileType plaintex setlocal textwidth=78
autocmd FileType markdown setlocal textwidth=78
autocmd FileType xml setlocal textwidth=78

" ignore certain file types in searches
set wildignore+=*.so,*.swp,*.zip,*.log,*.aux,*~,.DS_Store,*.pyg,*.o

" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
" Also don't do it when the mark is in the first line, that is the default
" position when opening a file.
autocmd BufReadPost *
  \ if line("'\"") > 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif

""From http://blog.kamil.dworakowski.name/2009/09/unobtrusive-highlighting-of-trailing.html
" show trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
au ColorScheme * highlight ExtraWhitespace guibg=red
au BufEnter * match ExtraWhitespace /\s\+$/
au InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
au InsertLeave * match ExtraWhiteSpace /\s\+$/

""From http://rails-bestpractices.com/posts/60-remove-trailing-whitespace
" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

